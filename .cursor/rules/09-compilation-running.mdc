---
description:
globs:
alwaysApply: false
---

# 7. 编译和运行

## 7.1 概述

本规范定义了Go HTTP Server项目的编译和运行标准，包括开发环境构建、生产环境构建、Docker构建和运行配置。

## 7.2 开发环境构建

### 7.2.1 基本构建
```bash
# 使用 vendor 目录构建
go build -mod=vendor ./cmd/simple_server
go build -mod=vendor ./cmd/test_storage

# 运行测试
go test -mod=vendor ./...
```

### 7.2.2 开发工具
```bash
# 代码格式化
go fmt ./...

# 代码检查
go vet ./...

# 运行 linter
golangci-lint run

# 生成 API 文档
swag init -g cmd/main.go -o docs
```

## 7.3 生产环境构建

### 7.3.1 依赖管理
```bash
# 更新依赖
go mod tidy
go mod vendor

# 验证依赖
go mod verify
```

### 7.3.2 生产构建
```bash
# 构建生产版本（优化二进制大小）
go build -mod=vendor -ldflags="-s -w" ./cmd/simple_server

# 构建多平台版本
GOOS=linux GOARCH=amd64 go build -mod=vendor -ldflags="-s -w" -o server-linux-amd64 ./cmd/simple_server
GOOS=darwin GOARCH=amd64 go build -mod=vendor -ldflags="-s -w" -o server-darwin-amd64 ./cmd/simple_server
GOOS=windows GOARCH=amd64 go build -mod=vendor -ldflags="-s -w" -o server-windows-amd64.exe ./cmd/simple_server
```

### 7.3.3 构建优化
```bash
# 启用编译优化
go build -mod=vendor -ldflags="-s -w -X main.Version=$(git describe --tags)" ./cmd/simple_server

# 构建信息注入
go build -mod=vendor -ldflags="-s -w \
    -X main.Version=$(git describe --tags) \
    -X main.BuildTime=$(date -u '+%Y-%m-%d_%H:%M:%S') \
    -X main.GitCommit=$(git rev-parse HEAD)" \
    ./cmd/simple_server
```

## 7.4 Docker 构建

### 7.4.1 多阶段构建
```dockerfile
# 使用 vendor 目录进行多阶段构建
FROM golang:1.24-alpine AS builder

# 安装构建依赖
RUN apk add --no-cache git ca-certificates tzdata

WORKDIR /app

# 复制依赖文件
COPY go.mod go.sum ./
COPY vendor ./vendor

# 复制源代码
COPY . .

# 构建应用
RUN CGO_ENABLED=0 GOOS=linux go build -mod=vendor \
    -ldflags="-s -w -X main.Version=$(git describe --tags 2>/dev/null || echo 'dev')" \
    -o server ./cmd/simple_server

# 运行阶段
FROM alpine:latest

# 安装运行时依赖
RUN apk --no-cache add ca-certificates tzdata

# 创建非 root 用户
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

WORKDIR /app

# 复制二进制文件
COPY --from=builder /app/server .

# 复制配置文件
COPY --from=builder /app/configs ./configs

# 设置权限
RUN chown -R appuser:appgroup /app

# 切换到非 root 用户
USER appuser

# 暴露端口
EXPOSE 8080

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# 启动命令
CMD ["./server"]
```

### 7.4.2 构建命令
```bash
# 构建 Docker 镜像
docker build -t go-http-server:latest .

# 构建指定版本
docker build -t go-http-server:v1.0.0 .

# 构建多平台镜像
docker buildx build --platform linux/amd64,linux/arm64 -t go-http-server:latest .
```

## 7.5 运行配置

### 7.5.1 环境变量
```bash
# 应用配置
export ENV=production
export PORT=8080
export HOST=0.0.0.0

# 数据库配置
export DB_TYPE=postgresql
export DB_HOST=localhost
export DB_PORT=5432
export DB_USER=postgres
export DB_PASSWORD=password
export DB_NAME=server_tpl

# 监控配置
export PROMETHEUS_ENABLED=true
export PROMETHEUS_PORT=9090
```

### 7.5.2 配置文件
```yaml
# configs/config.yaml
app:
  name: "go-http-server"
  version: "1.0.0"
  port: 8080
  host: "0.0.0.0"

database:
  type: "postgresql"
  host: "localhost"
  port: 5432
  user: "postgres"
  password: "password"
  name: "server_tpl"
  max_open_conns: 100
  max_idle_conns: 10

prometheus:
  enabled: true
  port: 9090
  host: "localhost"
```

### 7.5.3 启动脚本
```bash
#!/bin/bash
# scripts/start.sh

# 设置环境变量
export ENV=${ENV:-production}
export PORT=${PORT:-8080}

# 检查配置文件
if [ ! -f "configs/config.yaml" ]; then
    echo "配置文件不存在: configs/config.yaml"
    exit 1
fi

# 启动应用
echo "启动 Go HTTP Server..."
./server
```

## 7.6 部署脚本

### 7.6.1 Makefile
```makefile
# Makefile
.PHONY: build test clean docker-build docker-run

# 构建
build:
	go build -mod=vendor -ldflags="-s -w" -o bin/server ./cmd/simple_server

# 测试
test:
	go test -mod=vendor -v ./...

# 清理
clean:
	rm -rf bin/
	go clean -cache

# Docker 构建
docker-build:
	docker build -t go-http-server:latest .

# Docker 运行
docker-run:
	docker run -p 8080:8080 -p 9090:9090 go-http-server:latest

# 发布
release:
	git tag v$(VERSION)
	git push origin v$(VERSION)
```

### 7.6.2 部署脚本
```bash
#!/bin/bash
# scripts/deploy.sh

set -e

# 配置
APP_NAME="go-http-server"
VERSION=${1:-latest}
DOCKER_REGISTRY="your-registry.com"

# 构建镜像
echo "构建 Docker 镜像..."
docker build -t ${APP_NAME}:${VERSION} .

# 推送镜像
echo "推送镜像到仓库..."
docker tag ${APP_NAME}:${VERSION} ${DOCKER_REGISTRY}/${APP_NAME}:${VERSION}
docker push ${DOCKER_REGISTRY}/${APP_NAME}:${VERSION}

# 部署到 Kubernetes
echo "部署到 Kubernetes..."
kubectl set image deployment/${APP_NAME} ${APP_NAME}=${DOCKER_REGISTRY}/${APP_NAME}:${VERSION}
kubectl rollout status deployment/${APP_NAME}

echo "部署完成!"
```

## 7.7 性能优化

### 7.7.1 编译优化
- 使用 `-ldflags="-s -w"` 减小二进制大小
- 启用 CGO_ENABLED=0 进行静态链接
- 使用多阶段构建减少镜像大小

### 7.7.2 运行时优化
- 合理设置 GOMAXPROCS
- 使用 pprof 进行性能分析
- 监控内存和 CPU 使用情况

### 7.7.3 部署优化
- 使用健康检查确保服务可用性
- 配置资源限制和请求
- 实现优雅关闭
