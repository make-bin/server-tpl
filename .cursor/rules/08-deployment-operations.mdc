---
description:
globs:
alwaysApply: false
---

# 部署和运维

## 1 概述

本规范定义了Go HTTP Server项目的部署和运维标准，包括容器化、Kubernetes部署、监控日志、性能分析和CI/CD流程。

## 2 容器化

### 2.1 Docker配置
- 使用Docker进行容器化
- 多阶段构建优化镜像大小
- 健康检查配置
- 使用 vendor 目录确保构建一致性

### 2.2 镜像优化
```dockerfile
# 多阶段构建示例
FROM golang:1.24-alpine AS builder
WORKDIR /app
COPY go.mod go.sum ./
COPY vendor ./vendor
COPY . .
RUN CGO_ENABLED=0 GOOS=linux go build -mod=vendor -ldflags="-s -w" -o server ./cmd/simple_server

FROM alpine:latest
RUN apk --no-cache add ca-certificates tzdata
WORKDIR /app
COPY --from=builder /app/server .
EXPOSE 8080
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1
CMD ["./server"]
```

## 3 Kubernetes部署

### 3.1 部署文件
- 提供完整的K8s部署文件
- 配置管理使用ConfigMap和Secret
- 服务发现和负载均衡
- 资源限制和请求配置

### 3.2 部署配置
```yaml
# k8s/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-http-server
spec:
  replicas: 3
  selector:
    matchLabels:
      app: go-http-server
  template:
    metadata:
      labels:
        app: go-http-server
    spec:
      containers:
      - name: server
        image: go-http-server:latest
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
```

### 3.3 服务配置
```yaml
# k8s/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: go-http-server-service
spec:
  selector:
    app: go-http-server
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
  type: LoadBalancer
```

## 4 监控和日志

### 4.1 日志管理
- 结构化日志输出
- 请求日志中间件
- 错误追踪
- 日志聚合和分析

### 4.2 监控系统
- 性能监控
- Prometheus 指标收集
- 业务指标监控
- 系统资源监控
- 数据库性能监控
- 缓存性能监控

### 4.3 告警配置
```yaml
# prometheus/alerts.yaml
groups:
  - name: go-http-server
    rules:
      - alert: HighErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.1
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "高错误率告警"
          description: "HTTP 5xx 错误率超过 10%"
      
      - alert: HighResponseTime
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 1
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "响应时间过长"
          description: "95% 响应时间超过 1 秒"
```

## 5 性能分析和调试

### 5.1 性能分析工具
- Go PProf 性能分析
- CPU 性能分析
- 内存泄漏检测
- Goroutine 泄漏分析
- 阻塞和锁竞争分析

### 5.2 监控指标
- 实时性能监控
- 性能报告生成
- 性能基准测试
- 性能趋势分析

## 6 CI/CD

### 6.1 自动化流程
- 自动化测试
- 代码质量检查
- 自动化部署
- 版本管理
- 依赖缓存策略

### 6.2 GitHub Actions配置
```yaml
# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true
    
    - name: Run tests
      run: go test -mod=vendor -v ./...
    
    - name: Run linter
      run: golangci-lint run
    
    - name: Build
      run: go build -mod=vendor -ldflags="-s -w" ./cmd/simple_server

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: docker build -t go-http-server:${{ github.sha }} .
    
    - name: Deploy to Kubernetes
      run: |
        kubectl set image deployment/go-http-server \
          go-http-server=go-http-server:${{ github.sha }}
        kubectl rollout status deployment/go-http-server
```

## 7 运维最佳实践

### 7.1 部署策略
- **蓝绿部署**: 零停机时间部署
- **滚动更新**: 逐步更新实例
- **金丝雀发布**: 小范围测试新版本
- **回滚机制**: 快速回滚到稳定版本

### 7.2 资源管理
- **资源限制**: 设置合理的CPU和内存限制
- **自动扩缩容**: 根据负载自动调整实例数量
- **资源监控**: 实时监控资源使用情况
- **成本优化**: 合理使用云资源

### 7.3 安全措施
- **网络安全**: 配置网络策略和防火墙
- **访问控制**: 实施RBAC权限管理
- **密钥管理**: 安全存储和管理敏感信息
- **漏洞扫描**: 定期扫描安全漏洞

### 9.7.4 备份和恢复
- **数据备份**: 定期备份数据库和配置文件
- **灾难恢复**: 制定灾难恢复计划
- **测试恢复**: 定期测试恢复流程
- **文档管理**: 维护详细的运维文档

## 9.8 故障排查

### 9.8.1 常见问题
- **服务不可用**: 检查健康检查和就绪检查
- **性能问题**: 使用PProf进行性能分析
- **内存泄漏**: 监控内存使用和GC情况
- **网络问题**: 检查网络配置和连接

### 9.8.2 排查工具
- **日志分析**: 使用ELK Stack分析日志
- **监控面板**: 使用Grafana查看监控数据
- **性能分析**: 使用PProf分析性能问题
- **网络诊断**: 使用网络工具诊断连接问题

## 9.9 文档和培训

### 9.9.1 运维文档
- **部署指南**: 详细的部署步骤和配置说明
- **运维手册**: 日常运维操作和故障处理
- **监控指南**: 监控指标和告警配置说明
- **故障手册**: 常见问题和解决方案

### 9.9.2 团队培训
- **技术培训**: 定期进行技术分享和培训
- **应急演练**: 定期进行故障应急演练
- **知识分享**: 建立知识库和最佳实践
- **持续改进**: 根据运维经验持续改进流程
