
# 配置管理规范

## 1. 技术栈
- viper: "github.com/spf13/viper"

## 2. 配置能力
- 文件配置（优先使用YAML）
- 环境变量
- 命令行参数
- 配置热重载

## 3. 配置架构

### 3.1 分层配置
配置优先级（从高到低）：
1. 命令行参数
2. 环境变量
3. 配置文件
4. 默认值

### 3.2 配置文件结构
```yaml
# configs/config.yaml
app:
  name: "go-http-server"
  version: "1.0.0"
  env: "development"
  debug: true

database:
  type: "postgresql"
  host: "localhost"
  port: 5432
  user: "postgres"
  password: "password"
  database: "server_tpl"
  ssl_mode: "disable"
  max_open_conns: 100
  max_idle_conns: 10
  conn_max_lifetime: "1h"

redis:
  host: "localhost"
  port: 6379
  password: ""
  database: 0
  pool_size: 10
  min_idle_conns: 5
  max_retries: 3
  dial_timeout: "5s"

log:
  level: "info"
  format: "json"
  output: "stdout"
  file_path: "logs/app.log"
  max_size: 100
  max_backups: 3
  max_age: 28
  compress: true

server:
  host: "0.0.0.0"
  port: 8080
  read_timeout: "30s"
  write_timeout: "30s"
  idle_timeout: "60s"
  cors:
    allowed_origins: ["http://localhost:3000"]
    allowed_methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    allowed_headers: ["Content-Type", "Authorization"]
    allow_credentials: true
    max_age: 86400

monitor:
  prometheus:
    enabled: true
    path: "/metrics"
    port: 9090
  pprof:
    enabled: false
    path_prefix: "/debug/pprof"
    port: 6060
```

## 4. 环境变量规范

### 4.1 命名规范
- 使用大写字母和下划线
- 前缀为服务名称（如：APP_、DB_、REDIS_）
- 敏感信息必须使用环境变量

### 4.2 常用环境变量
```bash
# 应用配置
APP_NAME=go-http-server
APP_VERSION=1.0.0
APP_ENV=production
APP_DEBUG=false

# 数据库配置
DB_TYPE=postgresql
DB_HOST=localhost
DB_PORT=5432
DB_USER=postgres
DB_PASSWORD=password
DB_NAME=server_tpl
DB_SSL_MODE=require

# Redis配置
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DATABASE=0

# 日志配置
LOG_LEVEL=info
LOG_FORMAT=json
LOG_OUTPUT=file

# 服务器配置
SERVER_HOST=0.0.0.0
SERVER_PORT=8080

# 监控配置
PROMETHEUS_ENABLED=true
PROMETHEUS_PORT=9090
PPROF_ENABLED=false
```

## 5. 配置管理实现

### 5.1 配置管理器接口
```go
type Manager interface {
    Load(configPath string) error
    GetConfig() *Config
    WatchConfig(callback func(*Config))
    Validate() error
}
```

### 5.2 核心功能
- 配置文件加载和解析
- 环境变量绑定
- 配置验证
- 配置热重载
- 类型安全的配置访问

## 6. 最佳实践

### 6.1 配置分层
- **默认配置**: 提供合理的默认值
- **环境配置**: 根据环境调整配置
- **本地配置**: 开发人员本地配置
- **运行时配置**: 通过环境变量或命令行参数覆盖

### 6.2 安全考虑
- 敏感信息使用环境变量存储
- 不要将包含敏感信息的配置文件提交到版本控制
- 确保配置文件有适当的文件权限
- 考虑对敏感配置进行加密

### 6.3 配置验证
- 验证配置值的类型和范围
- 检查配置项之间的依赖关系
- 验证URL、路径等格式
- 确保必需的配置项存在

### 6.4 配置文档
- 为每个配置项提供详细的说明
- 提供完整的配置示例
- 说明不同环境的配置差异
- 记录配置变更历史

    
    // 写入新配置
    return writeConfigToFile(newConfig, newConfigPath)
}
```