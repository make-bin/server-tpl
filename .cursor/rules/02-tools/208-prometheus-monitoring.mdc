# Prometheus监控规范

## 1. 概述

本规范定义了Go HTTP Server项目的Prometheus监控标准，包括指标类型、配置规范、使用方法和最佳实践。

## 2. 指标类型

项目使用 Prometheus 进行监控，支持以下指标类型：

### 2.1 HTTP 请求指标
- `http_requests_total`: HTTP 请求总数（Counter）
- `http_request_duration_seconds`: HTTP 请求持续时间（Histogram）
- `http_request_size_bytes`: HTTP 请求大小（Histogram）
- `http_response_size_bytes`: HTTP 响应大小（Histogram）

### 2.2 业务指标
- `business_operations_total`: 业务操作总数（Counter）
- `business_operation_duration_seconds`: 业务操作持续时间（Histogram）
- `business_errors_total`: 业务错误总数（Counter）

### 2.3 系统指标
- `system_memory_usage_bytes`: 系统内存使用量（Gauge）
- `system_cpu_usage_percent`: 系统 CPU 使用率（Gauge）
- `system_goroutines`: Goroutine 数量（Gauge）
- `system_heap_alloc_bytes`: 堆内存分配量（Gauge）
- `system_heap_sys_bytes`: 堆内存系统分配量（Gauge）

### 2.4 数据库指标
- `database_connections`: 数据库连接数（Gauge）
- `database_queries_total`: 数据库查询总数（Counter）
- `database_query_duration_seconds`: 数据库查询持续时间（Histogram）
- `database_errors_total`: 数据库错误总数（Counter）

### 2.5 缓存指标
- `cache_hits_total`: 缓存命中总数（Counter）
- `cache_misses_total`: 缓存未命中总数（Counter）
- `cache_size`: 缓存大小（Gauge）

## 3. 配置规范

### 3.1 配置文件
```yaml
# configs/config.yaml
prometheus:
  enabled: true
  metrics_path: "/metrics"
  port: 9090
  host: "localhost"
```

### 3.2 环境变量
```bash
# Prometheus 配置环境变量
PROMETHEUS_ENABLED=true
PROMETHEUS_METRICS_PATH=/metrics
PROMETHEUS_PORT=9090
PROMETHEUS_HOST=localhost
```

## 4. 使用规范

### 4.1 中间件配置
```go
// 1. 创建配置
config := &middleware.PrometheusConfig{
    Enabled:     true,
    MetricsPath: "/metrics",
    Port:        9090,
    Host:        "localhost",
}

// 2. 创建中间件
prometheus, err := middleware.NewPrometheusMiddleware(config)
if err != nil {
    log.Fatal(err)
}

// 3. 添加到 Gin 引擎
engine.Use(prometheus.HTTPMiddleware())
engine.GET("/metrics", prometheus.MetricsHandler())
```

### 4.2 指标记录
```go
// 记录业务指标
prometheus.RecordBusinessOperation("create_user", "success", duration)
prometheus.RecordDatabaseQuery("postgresql", "insert", duration)
prometheus.RecordCacheHit("redis")

// 记录自定义指标
prometheus.RecordCustomMetric("user_registration", map[string]string{
    "source": "web",
    "region": "cn",
}, 1)
```

## 5. 监控最佳实践

### 5.1 指标命名
- 使用下划线分隔的小写字母
- 遵循 Prometheus 命名约定
- 避免使用特殊字符

### 5.2 标签设计
- 合理使用标签，避免高基数问题
- 标签值应该是有限的、可枚举的
- 避免使用用户ID等动态值作为标签

### 5.3 指标聚合
- 在应用层进行指标聚合
- 使用 Histogram 和 Summary 进行分位数统计
- 合理设置 bucket 范围

### 5.4 错误处理
- 记录所有错误类型和频率
- 区分不同类型的错误
- 提供错误上下文信息

### 5.5 性能监控
- 监控关键业务操作的性能
- 设置合理的告警阈值
- 定期分析性能趋势

### 5.6 资源监控
- 监控系统资源使用情况
- 设置资源使用告警
- 监控应用内存和CPU使用

## 6. Grafana 仪表板

### 6.1 标准仪表板
项目提供标准的 Grafana 仪表板配置，包括：
- HTTP 请求监控面板
- 业务指标监控面板
- 系统资源监控面板
- 数据库性能监控面板
- 缓存性能监控面板

### 6.2 仪表板配置
```json
{
  "dashboard": {
    "title": "Go HTTP Server 监控",
    "panels": [
      {
        "title": "HTTP 请求统计",
        "type": "graph",
        "targets": [
          {
            "expr": "rate(http_requests_total[5m])",
            "legendFormat": "{{method}} {{path}}"
          }
        ]
      }
    ]
  }
}
```

## 7. 告警规则

### 7.1 HTTP 告警
```yaml
groups:
  - name: http_alerts
    rules:
      - alert: HighErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.1
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "高错误率告警"
          description: "HTTP 5xx 错误率超过 10%"
```

### 7.2 系统告警
```yaml
      - alert: HighMemoryUsage
        expr: system_memory_usage_bytes / system_memory_total_bytes > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "内存使用率过高"
          description: "系统内存使用率超过 80%"
```

## 8. 监控架构

### 8.1 组件架构
```
应用服务 -> Prometheus -> Grafana -> 告警管理器
```

### 8.2 核心功能
- 指标收集和存储
- 数据查询和分析
- 可视化展示
- 告警通知
- 历史数据保留

### 6.9.3 查询优化
- 使用索引加速查询
- 避免复杂的聚合查询
- 合理使用缓存
