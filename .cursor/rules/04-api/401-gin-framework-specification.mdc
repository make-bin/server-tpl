# Gin框架规范

## 1. 概述

本文档定义了项目中 Gin HTTP 框架的使用规范，包括路由设计、中间件使用、错误处理、性能优化等最佳实践。

## 2. 技术栈

### 2.1 核心依赖
- **HTTP 框架**: Gin v1.9.x
- **路由引擎**: Gin 内置路由
- **中间件**: Gin 内置 + 自定义中间件
- **参数验证**: `go-playground/validator`
- **JSON 处理**: Gin 内置 + `encoding/json`

### 2.2 版本要求
```go
require (
    github.com/gin-gonic/gin v1.9.1
    github.com/go-playground/validator/v10 v10.15.5
)
```

## 3. 项目结构规范

### 3.1 目录组织
```
pkg/api/
├── handler/          # HTTP 处理器
│   ├── user.go
│   ├── order.go
│   └── health.go
├── middleware/       # 中间件
│   ├── auth.go
│   ├── cors.go
│   ├── logger.go
│   └── recovery.go
├── router/          # 路由配置
│   ├── router.go
│   └── routes.go
└── server.go        # HTTP 服务器
```

### 3.2 文件命名规范
- 处理器文件: `{resource}_handler.go`
- 中间件文件: `{function}_middleware.go`
- 路由文件: `router.go` 或 `{group}_routes.go`

## 4. 路由设计规范

### 4.1 路由分组
```go
// 按功能模块分组
func SetupRoutes(r *gin.Engine) {
    // API v1 路由组
    v1 := r.Group("/api/v1")
    {
        // 用户相关路由
        userGroup := v1.Group("/users")
        {
            userGroup.GET("", handlers.ListUsers)
            userGroup.POST("", handlers.CreateUser)
            userGroup.GET("/:id", handlers.GetUser)
            userGroup.PUT("/:id", handlers.UpdateUser)
            userGroup.DELETE("/:id", handlers.DeleteUser)
        }
        
        // 订单相关路由
        orderGroup := v1.Group("/orders")
        {
            orderGroup.GET("", handlers.ListOrders)
            orderGroup.POST("", handlers.CreateOrder)
            orderGroup.GET("/:id", handlers.GetOrder)
            orderGroup.PUT("/:id", handlers.UpdateOrder)
            orderGroup.DELETE("/:id", handlers.DeleteOrder)
        }
    }
}
```

### 4.2 URL 设计规范
- **RESTful 设计**: 使用标准 HTTP 方法和资源名词
- **版本控制**: URL 包含版本号 `/api/v1/`
- **复数形式**: 资源使用复数形式 `/users` 而不是 `/user`
- **嵌套资源**: 使用 `/users/:id/orders` 表示嵌套关系
- **查询参数**: 使用标准查询参数 `?page=1&size=10&sort=created_at`

### 4.3 HTTP 方法使用
```go
// GET - 获取资源
GET /api/v1/users          // 获取用户列表
GET /api/v1/users/:id      // 获取单个用户

// POST - 创建资源
POST /api/v1/users         // 创建用户

// PUT - 更新资源（完整更新）
PUT /api/v1/users/:id      // 更新用户

// PATCH - 部分更新资源
PATCH /api/v1/users/:id    // 部分更新用户

// DELETE - 删除资源
DELETE /api/v1/users/:id   // 删除用户
```

## 5. 处理器实现规范

### 5.1 处理器结构
```go
type UserHandler struct {
    userService domain.UserService
}

func NewUserHandler(userService domain.UserService) *UserHandler {
    return &UserHandler{
        userService: userService,
    }
}

// ListUsers 获取用户列表
func (h *UserHandler) ListUsers(c *gin.Context) {
    // 1. 参数验证
    var req ListUsersRequest
    if err := c.ShouldBindQuery(&req); err != nil {
        response.Error(c, http.StatusBadRequest, "参数验证失败", err)
        return
    }
    
    // 2. 业务逻辑处理
    users, total, err := h.userService.ListUsers(c.Request.Context(), req.Page, req.Size, req.Filters)
    if err != nil {
        response.Error(c, http.StatusInternalServerError, "获取用户列表失败", err)
        return
    }
    
    // 3. 返回响应
    response.Success(c, gin.H{
        "users": users,
        "total": total,
        "page":  req.Page,
        "size":  req.Size,
    })
}
```

### 5.2 请求参数验证
```go
// 请求结构体定义
type CreateUserRequest struct {
    Username string `json:"username" binding:"required,min=3,max=50"`
    Email    string `json:"email" binding:"required,email"`
    Password string `json:"password" binding:"required,min=6"`
    Age      int    `json:"age" binding:"gte=0,lte=150"`
}

// 自定义验证器
func RegisterValidators(v *validator.Validate) {
    v.RegisterValidation("phone", validatePhone)
    v.RegisterValidation("username", validateUsername)
}

// 参数绑定和验证
func (h *UserHandler) CreateUser(c *gin.Context) {
    var req CreateUserRequest
    if err := c.ShouldBindJSON(&req); err != nil {
        response.Error(c, http.StatusBadRequest, "参数验证失败", err)
        return
    }
    
    // 业务逻辑...
}
```

### 5.3 响应格式规范
```go
// 成功响应
response.Success(c, gin.H{
    "data": user,
    "message": "用户创建成功",
})

// 错误响应
response.Error(c, http.StatusBadRequest, "参数验证失败", err)

// 分页响应
response.Success(c, gin.H{
    "data": users,
    "pagination": gin.H{
        "page":  page,
        "size":  size,
        "total": total,
        "pages": pages,
    },
})
```

## 6. 中间件使用规范

### 6.1 中间件注册
```go
func SetupMiddlewares(r *gin.Engine) {
    // 全局中间件
    r.Use(middleware.Logger())
    r.Use(middleware.Recovery())
    r.Use(middleware.CORS())
    
    // 路由组中间件
    api := r.Group("/api")
    api.Use(middleware.Auth())
    api.Use(middleware.RateLimit())
}
```

### 6.2 中间件顺序
1. **日志中间件** - 记录请求日志
2. **恢复中间件** - 处理panic
3. **CORS中间件** - 跨域处理
4. **认证中间件** - 身份验证
5. **授权中间件** - 权限控制
6. **限流中间件** - 请求限制
7. **业务中间件** - 业务逻辑

## 7. 错误处理规范

### 7.1 统一错误处理
```go
// 全局错误处理中间件
func ErrorHandler() gin.HandlerFunc {
    return func(c *gin.Context) {
        c.Next()
        
        // 检查是否有错误
        if len(c.Errors) > 0 {
            err := c.Errors.Last()
            handleError(c, err.Err)
        }
    }
}

// 错误处理函数
func handleError(c *gin.Context, err error) {
    switch e := err.(type) {
    case *ValidationError:
        response.ValidationError(c, e.Details)
    case *BusinessError:
        response.Error(c, e.StatusCode, e.Code, e.Message, err)
    default:
        response.Error(c, http.StatusInternalServerError, 50000, "服务器内部错误", err)
    }
}
```

### 7.2 自定义错误类型
```go
// ValidationError 参数验证错误
type ValidationError struct {
    Details []ErrorDetail
}

// BusinessError 业务错误
type BusinessError struct {
    StatusCode int
    Code       int
    Message    string
}
```

## 8. 性能优化规范

### 8.1 路由优化
- 使用路由分组减少重复代码
- 合理使用中间件，避免不必要的处理
- 使用路由缓存提高性能

### 8.2 参数绑定优化
- 使用 `ShouldBind` 而不是 `Bind`
- 合理设置参数验证规则
- 避免在处理器中进行复杂的数据转换

### 8.3 响应优化
- 使用统一的响应格式
- 合理设置响应头
- 避免返回过大的响应体

## 9. 最佳实践

### 9.1 处理器最佳实践
- **单一职责**: 每个处理器只负责一个功能
- **依赖注入**: 通过构造函数注入依赖
- **错误处理**: 统一处理错误并返回标准格式
- **参数验证**: 严格验证输入参数

### 9.2 路由最佳实践
- **RESTful设计**: 遵循RESTful API设计原则
- **版本控制**: 在URL中包含版本号
- **资源命名**: 使用复数形式命名资源
- **嵌套资源**: 合理使用嵌套资源表示关系

### 9.3 中间件最佳实践
- **顺序安排**: 合理安排中间件的执行顺序
- **性能考虑**: 避免在中间件中执行昂贵操作
- **错误处理**: 妥善处理中间件中的错误
- **可配置性**: 提供灵活的配置选项
