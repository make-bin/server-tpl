---
description:
globs:
alwaysApply: false
---

# 开发最佳实践

## 概述

本规范定义了 Go HTTP Server 项目的开发最佳实践，包括命名规范、错误处理、日志规范、配置管理、测试规范、代码质量、版本控制和文档规范等。

## 1. 命名规范

### 1.1 包命名规范
- **包名**: 使用小写字母，避免下划线
- **包名**: 应该简洁、清晰，表达包的功能
- **包名**: 避免使用复数形式
- **包名**: 避免使用缩写，除非是广泛使用的缩写

### 1.2 函数命名规范
- **函数名**: 使用驼峰命名法
- **函数名**: 应该表达函数的功能
- **函数名**: 动词开头，表示动作
- **函数名**: 避免缩写，保持可读性

### 1.3 变量命名规范
- **变量名**: 使用驼峰命名法
- **变量名**: 应该表达变量的含义
- **变量名**: 避免使用单字母变量名（除了循环变量）
- **变量名**: 布尔变量使用 is、has、can 等前缀


### 1.4 常量命名规范
- **常量名**: 使用大写字母和下划线
- **常量名**: 应该表达常量的含义
- **常量名**: 避免使用缩写

### 1.5 接口命名规范
- **接口名**: 使用驼峰命名法
- **接口名**: 以 Service、Repository、Handler 等后缀结尾
- **接口名**: 应该表达接口的功能

### 1.6 结构体命名规范
- **结构体名**: 使用驼峰命名法
- **结构体名**: 应该表达结构体的含义
- **结构体名**: 避免使用缩写

## 2. 代码质量规范

### 2.1 代码检查工具

#### 2.1.1 golangci-lint 配置
```yaml
# .golangci.yml
run:
  timeout: 5m
  go: "1.21"

linters:
  enable:
    - gofmt
    - goimports
    - govet
    - errcheck
    - staticcheck
    - gosimple
    - ineffassign
    - unused
    - misspell
    - gosec
    - prealloc
    - gocritic
    - revive

linters-settings:
  govet:
    check-shadowing: true
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
  revive:
    rules:
      - name: exported
        arguments:
          - disableStutteringCheck

issues:
  exclude-rules:
    - path: _test\.go
      linters:
        - errcheck
```

#### 2.1.2 代码检查命令
```bash
# 格式化代码
go fmt ./...

# 检查代码格式
go vet ./...

# 运行代码检查
golangci-lint run

# 运行代码检查并生成报告
golangci-lint run --out-format=html > lint-report.html

# 修复可自动修复的问题
golangci-lint run --fix
```

### 2.2 代码格式化规范

#### 2.2.1 导入规范
```go
// 正确的导入顺序
import (
    // 标准库
    "context"
    "fmt"
    "net/http"
    "time"

    // 第三方库
    "github.com/gin-gonic/gin"
    "github.com/go-playground/validator/v10"
    "github.com/sirupsen/logrus"

    // 项目内部包
    "your-project/pkg/domain"
    "your-project/pkg/infrastructure"
    "your-project/pkg/utils"
)
```

#### 2.2.2 代码结构规范
```go
// 正确的代码结构
package user

import (
    "context"
    "time"

    "github.com/gin-gonic/gin"
    "your-project/pkg/domain"
)

// 常量定义
const (
    MaxRetryCount = 3
    DefaultTimeout = 30 * time.Second
)

// 变量定义
var (
    logger = logrus.New()
)

// 类型定义
type User struct {
    ID        string    `json:"id"`
    Username  string    `json:"username"`
    Email     string    `json:"email"`
    CreatedAt time.Time `json:"created_at"`
    UpdatedAt time.Time `json:"updated_at"`
}

// 接口定义
type UserService interface {
    CreateUser(ctx context.Context, req CreateUserRequest) (*User, error)
    GetUserByID(ctx context.Context, id string) (*User, error)
    UpdateUser(ctx context.Context, user *User) error
    DeleteUser(ctx context.Context, id string) error
}

// 结构体定义
type userService struct {
    repo domain.UserRepository
}

// 构造函数
func NewUserService(repo domain.UserRepository) UserService {
    return &userService{
        repo: repo,
    }
}

// 方法实现
func (s *userService) CreateUser(ctx context.Context, req CreateUserRequest) (*User, error) {
    // 实现代码
    return nil, nil
}
```

### 2.3 注释规范

#### 2.3.1 包注释
```go
// Package user 提供用户相关的业务逻辑
// 包括用户的创建、查询、更新、删除等操作
package user
```

#### 2.3.2 函数注释
```go
// CreateUser 创建新用户
// 参数：
//   - ctx: 上下文，用于控制请求的生命周期
//   - req: 创建用户请求，包含用户名、邮箱、密码等信息
// 返回：
//   - *User: 创建成功的用户信息
//   - error: 错误信息，如果创建失败则返回相应的错误
func CreateUser(ctx context.Context, req CreateUserRequest) (*User, error) {
    // 实现代码
    return nil, nil
}

// GetUserByID 根据用户ID获取用户信息
// 如果用户不存在，返回 domain.ErrUserNotFound 错误
func GetUserByID(ctx context.Context, id string) (*User, error) {
    // 实现代码
    return nil, nil
}
```

#### 2.3.3 类型注释
```go
// User 表示用户实体
// 包含用户的基本信息，如ID、用户名、邮箱等
type User struct {
    // ID 用户唯一标识符
    ID string `json:"id"`
    
    // Username 用户名，用于登录和显示
    Username string `json:"username"`
    
    // Email 邮箱地址，用于通知和找回密码
    Email string `json:"email"`
    
    // CreatedAt 用户创建时间
    CreatedAt time.Time `json:"created_at"`
    
    // UpdatedAt 用户信息最后更新时间
    UpdatedAt time.Time `json:"updated_at"`
}

// UserService 定义用户服务接口
// 提供用户相关的业务操作，如创建、查询、更新、删除用户
type UserService interface {
    // CreateUser 创建新用户
    CreateUser(ctx context.Context, req CreateUserRequest) (*User, error)
    
    // GetUserByID 根据用户ID获取用户信息
    GetUserByID(ctx context.Context, id string) (*User, error)
    
    // UpdateUser 更新用户信息
    UpdateUser(ctx context.Context, user *User) error
    
    // DeleteUser 删除用户
    DeleteUser(ctx context.Context, id string) error
}
```
